<?php

/**
 * @file
 * The primary PHP file for the UWmed Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 */

use Drupal\block\Entity\Block;

/**
 * Prepares variables for HTML document templates.
 *
 * @param array $variables
 *   HTML Page Variables needed.
 */
function uwmed_bootstrap_preprocess_html(array &$variables) {
  $variables['path_info']['args'] = FALSE;
  $variables['path_info']['args'] = _uwmed_bootstrap_theme_body_id();
}

/**
 * Preprocess variables for page templates.
 *
 * @param array $variables
 *   HTML Site Config Variables needed.
 */
function uwmed_bootstrap_preprocess_page(array &$variables) {
  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page alter.
 */
function uwmed_bootstrap_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function uwmed_bootstrap_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_form_alter().
 */
function uwmed_bootstrap_form_alter(array &$form, $form_state, $form_id) {
  // Search Form.
  if ($form_id == 'search_block_form') {
    // Add needed attributes.
    $form['keys']['#attributes']['placeholder'] = t('Search...');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for input alter.
 */
function uwmed_bootstrap_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', strtolower($variables['element']['#value']));
}

/**
 * Preprocess variables for Webform.
 *
 * @param array $variables
 *   Variables needed.
 */
function uwmed_bootstrap_preprocess_webform(array &$variables) {
  // Add in the Webform Title as a Variable.
  $webform_title = ucwords(str_replace('_', ' ', $variables['element']['#webform_id']));
  $webform_title = str_replace(' A ', ' a ', $webform_title);
  $webform_title = str_replace(' An ', ' an ', $webform_title);
  $webform_title = str_replace(' And ', ' and ', $webform_title);
  $webform_title = str_replace(' The ', ' the ', $webform_title);
  $variables['webform_title'] = $webform_title;
}

/**
 * Implements hook_preprocess_menu() for menu.html.twig.
 */
function uwmed_bootstrap_preprocess_menu(array &$variables) {
  if ($variables['theme_hook_original'] == 'menu__main') {
    $current_path = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      if ($item['in_active_trail']) {
        $item['attributes']->addClass('active-trail');
        if ($item['url']->toString() == $current_path) {
          $variables['items'][$key]['attributes']->addClass('active');
        }
        elseif (count($item['below'])) {
          _menu_process_submenu($item['below'], $current_path);
        }
        else {
          $url_fragments = explode('/', $current_path);
          if (count($url_fragments) > 1 and '/' . $url_fragments[1] == $item['url']->toString()) {
            $variables['items'][$key]['attributes']->addClass('active');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node() for node--gallery--full.html.twig.
 */
function uwmed_bootstrap_preprocess_node__gallery__full(&$variables) {
  // Get the Paragraph Galleries Block.
  $block = Block::load('views_block__uwm_paragraph_galleries_block_paragraph_galleries');
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // Add block to variables so we can place it on the template with Twig.
  $variables['block_paragraph_galleries'] = $block_content;
}

/**
 * Implements hook_preprocess_node() for node--calendar-event--full.html.twig.
 */
function uwmed_bootstrap_preprocess_node__calendar_event__full(&$variables) {
  $node = $variables['node'];

  // The date-time field already has a twig field formatter to display stylized
  // dates, so we're adding the start_date_time as a variable to print in Twig.
  if (!empty($node->field_date_time)) {
    $start_date_time = $node->field_date_time->date;
    $start_date_time_formatted = \Drupal::service('date.formatter')->format(
      $start_date_time->getTimestamp(), 'custom', 'Y-m-d H:i:s P'
    );
    $variables['start_date_time'] = $start_date_time_formatted;

    // Make end time available to Twig by adding the duration to the start time.
    if (!empty($node->field_duration)) {
      $duration = $node->field_duration->value;
      $end_time = $start_date_time->add(new DateInterval($duration));
      $variables['end_time'] = $end_time;
    }
  }

}

/**
 * Set active and active-trail class for sub-menus recursively.
 *
 * @param array $submenu
 *   Submenu Array to alter.
 * @param string $current_path
 *   Current Path.
 */
function _menu_process_submenu(array &$submenu, $current_path) {
  foreach ($submenu as $item) {
    if ($item['in_active_trail']) {
      $item['attributes']->addClass('active-trail');
      if ($item['url']->toString() == $current_path) {
        $item['attributes']->addClass('active');
      }
      elseif (count($item['below'])) {
        _menu_process_submenu($item['below'], $current_path);
      }
    }
  }
}

/**
 * This function generates the body id for the preprocess_html function.
 */
function _uwmed_bootstrap_theme_body_id() {
  $url = trim($_SERVER['REQUEST_URI']);
  $url = str_replace(" ", "", $url);
  $url = str_replace("?", "/", $url);
  $url_array = explode('/', $url);
  $body_id = $url_array[1];
  if (isset($url_array[2])) {
    $body_id .= "-" . $url_array[2];
  }
  elseif (isset($url_array[3])) {
    $body_id .= "-" . $url_array[3];
  }
  if (!$body_id) {
    $body_id = "index";
  }
  if ($body_id == "search") {
    $body_id = "search-page";
  }
  return $body_id;
}
